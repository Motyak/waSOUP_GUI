//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `generatedIce.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace generatedIce
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class Track : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public int id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public string title;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public string artist;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public int duration;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public string md5;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public Track()
        {
            this.title = "";
            this.artist = "";
            this.md5 = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public Track(int id, string title, string artist, int duration, string md5)
        {
            this.id = id;
            this.title = title;
            this.artist = artist;
            this.duration = duration;
            this.md5 = md5;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::generatedIce::Track");
            global::IceInternal.HashUtil.hashAdd(ref h_, id);
            global::IceInternal.HashUtil.hashAdd(ref h_, title);
            global::IceInternal.HashUtil.hashAdd(ref h_, artist);
            global::IceInternal.HashUtil.hashAdd(ref h_, duration);
            global::IceInternal.HashUtil.hashAdd(ref h_, md5);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            Track o = (Track)other;
            if(!this.id.Equals(o.id))
            {
                return false;
            }
            if(this.title == null)
            {
                if(o.title != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.title.Equals(o.title))
                {
                    return false;
                }
            }
            if(this.artist == null)
            {
                if(o.artist != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.artist.Equals(o.artist))
                {
                    return false;
                }
            }
            if(!this.duration.Equals(o.duration))
            {
                return false;
            }
            if(this.md5 == null)
            {
                if(o.md5 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.md5.Equals(o.md5))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public static bool operator==(Track lhs, Track rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public static bool operator!=(Track lhs, Track rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.id);
            ostr.writeString(this.title);
            ostr.writeString(this.artist);
            ostr.writeInt(this.duration);
            ostr.writeString(this.md5);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.id = istr.readInt();
            this.title = istr.readString();
            this.artist = istr.readString();
            this.duration = istr.readInt();
            this.md5 = istr.readString();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public static void ice_write(global::Ice.OutputStream ostr, Track v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        public static Track ice_read(global::Ice.InputStream istr)
        {
            var v = new Track();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly Track _nullMarshalValue = new Track();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Collection : global::Ice.Object, CollectionOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Streaming : global::Ice.Object, StreamingOperations_
    {
    }
}

namespace generatedIce
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Collection_getAllTracks(Track[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Collection_upload();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Collection_finishUpload(Track ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Collection_updateIfExisting();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Collection_remove();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Streaming_play();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Streaming_togglePause();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Streaming_skipTime();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public delegate void Callback_Streaming_stop();
}

namespace generatedIce
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public interface CollectionPrx : global::Ice.ObjectPrx
    {
        Track[] getAllTracks(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Track[]> getAllTracksAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Collection_getAllTracks> begin_getAllTracks(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getAllTracks(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getAllTracks(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        Track[] end_getAllTracks(global::Ice.AsyncResult asyncResult);

        void upload(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task uploadAsync(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Collection_upload> begin_upload(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_upload(Track track, byte[] dataChunk, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_upload(Track track, byte[] dataChunk, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_upload(global::Ice.AsyncResult asyncResult);

        Track finishUpload(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Track> finishUploadAsync(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Collection_finishUpload> begin_finishUpload(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_finishUpload(Track track, byte[] dataChunk, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_finishUpload(Track track, byte[] dataChunk, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        Track end_finishUpload(global::Ice.AsyncResult asyncResult);

        void updateIfExisting(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task updateIfExistingAsync(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Collection_updateIfExisting> begin_updateIfExisting(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_updateIfExisting(Track track, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_updateIfExisting(Track track, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_updateIfExisting(global::Ice.AsyncResult asyncResult);

        void remove(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task removeAsync(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Collection_remove> begin_remove(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_remove(Track track, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_remove(Track track, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_remove(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public interface StreamingPrx : global::Ice.ObjectPrx
    {
        void play(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task playAsync(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Streaming_play> begin_play(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_play(Track track, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_play(Track track, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_play(global::Ice.AsyncResult asyncResult);

        void togglePause(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task togglePauseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Streaming_togglePause> begin_togglePause(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_togglePause(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_togglePause(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_togglePause(global::Ice.AsyncResult asyncResult);

        void skipTime(int delta, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task skipTimeAsync(int delta, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Streaming_skipTime> begin_skipTime(int delta, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_skipTime(int delta, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_skipTime(int delta, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_skipTime(global::Ice.AsyncResult asyncResult);

        void stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task stopAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Streaming_stop> begin_stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_stop(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_stop(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_stop(global::Ice.AsyncResult asyncResult);
    }
}

namespace generatedIce
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public interface CollectionOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        Track[] getAllTracks(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void upload(Track track, byte[] dataChunk, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        Track finishUpload(Track track, byte[] dataChunk, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void updateIfExisting(Track track, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void remove(Track track, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public interface StreamingOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void play(Track track, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void togglePause(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void skipTime(int delta, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
        void stop(global::Ice.Current current = null);
    }
}

namespace generatedIce
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public sealed class TracksHelper
    {
        public static void write(global::Ice.OutputStream ostr, Track[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new Track() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static Track[] read(global::Ice.InputStream istr)
        {
            Track[] v;
            {
                int szx = istr.readAndCheckSeqSize(11);
                v = new Track[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Track();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public sealed class BytesHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    [global::System.Serializable]
    public sealed class CollectionPrxHelper : global::Ice.ObjectPrxHelperBase, CollectionPrx
    {
        public CollectionPrxHelper()
        {
        }

        public CollectionPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Track[] getAllTracks(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getAllTracksAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void upload(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_uploadAsync(track, dataChunk, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Track finishUpload(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_finishUploadAsync(track, dataChunk, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void updateIfExisting(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_updateIfExistingAsync(track, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void remove(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_removeAsync(track, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Track[]> getAllTracksAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getAllTracksAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Track[]> _iceI_getAllTracksAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getAllTracks_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Track[]>(progress, cancel);
            _iceI_getAllTracks(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getAllTracks_name = "getAllTracks";

        private void _iceI_getAllTracks(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Track[]>(completed);
            outAsync.invoke(
                _getAllTracks_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Track[] ret;
                    ret = TracksHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task uploadAsync(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_uploadAsync(track, dataChunk, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_uploadAsync(Track iceP_track, byte[] iceP_dataChunk, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_upload(iceP_track, iceP_dataChunk, context, synchronous, completed);
            return completed.Task;
        }

        private const string _upload_name = "upload";

        private void _iceI_upload(Track iceP_track, byte[] iceP_dataChunk, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _upload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Track.ice_write(ostr, iceP_track);
                    BytesHelper.write(ostr, iceP_dataChunk);
                });
        }

        public global::System.Threading.Tasks.Task<Track> finishUploadAsync(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_finishUploadAsync(track, dataChunk, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Track> _iceI_finishUploadAsync(Track iceP_track, byte[] iceP_dataChunk, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_finishUpload_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Track>(progress, cancel);
            _iceI_finishUpload(iceP_track, iceP_dataChunk, context, synchronous, completed);
            return completed.Task;
        }

        private const string _finishUpload_name = "finishUpload";

        private void _iceI_finishUpload(Track iceP_track, byte[] iceP_dataChunk, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Track>(completed);
            outAsync.invoke(
                _finishUpload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Track.ice_write(ostr, iceP_track);
                    BytesHelper.write(ostr, iceP_dataChunk);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Track ret = null;
                    ret = Track.ice_read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task updateIfExistingAsync(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_updateIfExistingAsync(track, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_updateIfExistingAsync(Track iceP_track, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_updateIfExisting(iceP_track, context, synchronous, completed);
            return completed.Task;
        }

        private const string _updateIfExisting_name = "updateIfExisting";

        private void _iceI_updateIfExisting(Track iceP_track, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _updateIfExisting_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Track.ice_write(ostr, iceP_track);
                });
        }

        public global::System.Threading.Tasks.Task removeAsync(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeAsync(track, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_removeAsync(Track iceP_track, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_remove(iceP_track, context, synchronous, completed);
            return completed.Task;
        }

        private const string _remove_name = "remove";

        private void _iceI_remove(Track iceP_track, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _remove_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Track.ice_write(ostr, iceP_track);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Collection_getAllTracks> begin_getAllTracks(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getAllTracks(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getAllTracks(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getAllTracks(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getAllTracks(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getAllTracks(context, callback, cookie, false);
        }

        public Track[] end_getAllTracks(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAllTracks_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Track[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Collection_getAllTracks> begin_getAllTracks(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getAllTracks_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Collection_getAllTracks, Track[]>(
                (Callback_Collection_getAllTracks cb, Track[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getAllTracks_name, cookie, completedCallback);
            _iceI_getAllTracks(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Collection_upload> begin_upload(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_upload(track, dataChunk, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_upload(Track track, byte[] dataChunk, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_upload(track, dataChunk, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_upload(Track track, byte[] dataChunk, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_upload(track, dataChunk, context, callback, cookie, false);
        }

        public void end_upload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _upload_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Collection_upload> begin_upload(Track iceP_track, byte[] iceP_dataChunk, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Collection_upload, object>(
                (Callback_Collection_upload cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _upload_name, cookie, completedCallback);
            _iceI_upload(iceP_track, iceP_dataChunk, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Collection_finishUpload> begin_finishUpload(Track track, byte[] dataChunk, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_finishUpload(track, dataChunk, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_finishUpload(Track track, byte[] dataChunk, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_finishUpload(track, dataChunk, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_finishUpload(Track track, byte[] dataChunk, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_finishUpload(track, dataChunk, context, callback, cookie, false);
        }

        public Track end_finishUpload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _finishUpload_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Track>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Collection_finishUpload> begin_finishUpload(Track iceP_track, byte[] iceP_dataChunk, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_finishUpload_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Collection_finishUpload, Track>(
                (Callback_Collection_finishUpload cb, Track ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _finishUpload_name, cookie, completedCallback);
            _iceI_finishUpload(iceP_track, iceP_dataChunk, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Collection_updateIfExisting> begin_updateIfExisting(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_updateIfExisting(track, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_updateIfExisting(Track track, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateIfExisting(track, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_updateIfExisting(Track track, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateIfExisting(track, context, callback, cookie, false);
        }

        public void end_updateIfExisting(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _updateIfExisting_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Collection_updateIfExisting> begin_updateIfExisting(Track iceP_track, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Collection_updateIfExisting, object>(
                (Callback_Collection_updateIfExisting cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _updateIfExisting_name, cookie, completedCallback);
            _iceI_updateIfExisting(iceP_track, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Collection_remove> begin_remove(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_remove(track, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_remove(Track track, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_remove(track, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_remove(Track track, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_remove(track, context, callback, cookie, false);
        }

        public void end_remove(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _remove_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Collection_remove> begin_remove(Track iceP_track, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Collection_remove, object>(
                (Callback_Collection_remove cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _remove_name, cookie, completedCallback);
            _iceI_remove(iceP_track, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CollectionPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CollectionPrx r = b as CollectionPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CollectionPrxHelper h = new CollectionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CollectionPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CollectionPrx r = b as CollectionPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CollectionPrxHelper h = new CollectionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CollectionPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CollectionPrxHelper h = new CollectionPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CollectionPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CollectionPrxHelper h = new CollectionPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CollectionPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CollectionPrx r = b as CollectionPrx;
            if(r == null)
            {
                CollectionPrxHelper h = new CollectionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CollectionPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CollectionPrxHelper h = new CollectionPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::generatedIce::Collection"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CollectionPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CollectionPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CollectionPrxHelper result = new CollectionPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    [global::System.Serializable]
    public sealed class StreamingPrxHelper : global::Ice.ObjectPrxHelperBase, StreamingPrx
    {
        public StreamingPrxHelper()
        {
        }

        public StreamingPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void play(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_playAsync(track, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void togglePause(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_togglePauseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void skipTime(int delta, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_skipTimeAsync(delta, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_stopAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task playAsync(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_playAsync(track, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_playAsync(Track iceP_track, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_play(iceP_track, context, synchronous, completed);
            return completed.Task;
        }

        private const string _play_name = "play";

        private void _iceI_play(Track iceP_track, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _play_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Track.ice_write(ostr, iceP_track);
                });
        }

        public global::System.Threading.Tasks.Task togglePauseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_togglePauseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_togglePauseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_togglePause(context, synchronous, completed);
            return completed.Task;
        }

        private const string _togglePause_name = "togglePause";

        private void _iceI_togglePause(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _togglePause_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task skipTimeAsync(int delta, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_skipTimeAsync(delta, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_skipTimeAsync(int iceP_delta, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_skipTime(iceP_delta, context, synchronous, completed);
            return completed.Task;
        }

        private const string _skipTime_name = "skipTime";

        private void _iceI_skipTime(int iceP_delta, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _skipTime_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_delta);
                });
        }

        public global::System.Threading.Tasks.Task stopAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_stopAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_stopAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_stop(context, synchronous, completed);
            return completed.Task;
        }

        private const string _stop_name = "stop";

        private void _iceI_stop(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _stop_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Streaming_play> begin_play(Track track, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_play(track, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_play(Track track, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_play(track, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_play(Track track, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_play(track, context, callback, cookie, false);
        }

        public void end_play(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _play_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Streaming_play> begin_play(Track iceP_track, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Streaming_play, object>(
                (Callback_Streaming_play cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _play_name, cookie, completedCallback);
            _iceI_play(iceP_track, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Streaming_togglePause> begin_togglePause(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_togglePause(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_togglePause(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_togglePause(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_togglePause(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_togglePause(context, callback, cookie, false);
        }

        public void end_togglePause(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _togglePause_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Streaming_togglePause> begin_togglePause(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Streaming_togglePause, object>(
                (Callback_Streaming_togglePause cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _togglePause_name, cookie, completedCallback);
            _iceI_togglePause(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Streaming_skipTime> begin_skipTime(int delta, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_skipTime(delta, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_skipTime(int delta, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_skipTime(delta, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_skipTime(int delta, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_skipTime(delta, context, callback, cookie, false);
        }

        public void end_skipTime(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _skipTime_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Streaming_skipTime> begin_skipTime(int iceP_delta, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Streaming_skipTime, object>(
                (Callback_Streaming_skipTime cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _skipTime_name, cookie, completedCallback);
            _iceI_skipTime(iceP_delta, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Streaming_stop> begin_stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_stop(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_stop(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_stop(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_stop(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_stop(context, callback, cookie, false);
        }

        public void end_stop(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _stop_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Streaming_stop> begin_stop(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Streaming_stop, object>(
                (Callback_Streaming_stop cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _stop_name, cookie, completedCallback);
            _iceI_stop(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static StreamingPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            StreamingPrx r = b as StreamingPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                StreamingPrxHelper h = new StreamingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static StreamingPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            StreamingPrx r = b as StreamingPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                StreamingPrxHelper h = new StreamingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static StreamingPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    StreamingPrxHelper h = new StreamingPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static StreamingPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    StreamingPrxHelper h = new StreamingPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static StreamingPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            StreamingPrx r = b as StreamingPrx;
            if(r == null)
            {
                StreamingPrxHelper h = new StreamingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static StreamingPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            StreamingPrxHelper h = new StreamingPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::generatedIce::Streaming"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, StreamingPrx v)
        {
            ostr.writeProxy(v);
        }

        public static StreamingPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                StreamingPrxHelper result = new StreamingPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace generatedIce
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public abstract class CollectionDisp_ : global::Ice.ObjectImpl, Collection
    {
        #region Slice operations

        public abstract Track[] getAllTracks(global::Ice.Current current = null);

        public abstract void upload(Track track, byte[] dataChunk, global::Ice.Current current = null);

        public abstract Track finishUpload(Track track, byte[] dataChunk, global::Ice.Current current = null);

        public abstract void updateIfExisting(Track track, global::Ice.Current current = null);

        public abstract void remove(Track track, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::generatedIce::Collection"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getAllTracks(Collection obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getAllTracks(current);
            var ostr = inS.startWriteParams();
            TracksHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_upload(Collection obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Track iceP_track;
            iceP_track = null;
            byte[] iceP_dataChunk;
            iceP_track = Track.ice_read(istr);
            iceP_dataChunk = BytesHelper.read(istr);
            inS.endReadParams();
            obj.upload(iceP_track, iceP_dataChunk, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_finishUpload(Collection obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Track iceP_track;
            iceP_track = null;
            byte[] iceP_dataChunk;
            iceP_track = Track.ice_read(istr);
            iceP_dataChunk = BytesHelper.read(istr);
            inS.endReadParams();
            var ret = obj.finishUpload(iceP_track, iceP_dataChunk, current);
            var ostr = inS.startWriteParams();
            Track.ice_write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_updateIfExisting(Collection obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Track iceP_track;
            iceP_track = null;
            iceP_track = Track.ice_read(istr);
            inS.endReadParams();
            obj.updateIfExisting(iceP_track, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_remove(Collection obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Track iceP_track;
            iceP_track = null;
            iceP_track = Track.ice_read(istr);
            inS.endReadParams();
            obj.remove(iceP_track, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "finishUpload",
            "getAllTracks",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "remove",
            "updateIfExisting",
            "upload"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_finishUpload(this, inS, current);
                }
                case 1:
                {
                    return iceD_getAllTracks(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_remove(this, inS, current);
                }
                case 7:
                {
                    return iceD_updateIfExisting(this, inS, current);
                }
                case 8:
                {
                    return iceD_upload(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.5")]
    public abstract class StreamingDisp_ : global::Ice.ObjectImpl, Streaming
    {
        #region Slice operations

        public abstract void play(Track track, global::Ice.Current current = null);

        public abstract void togglePause(global::Ice.Current current = null);

        public abstract void skipTime(int delta, global::Ice.Current current = null);

        public abstract void stop(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::generatedIce::Streaming"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_play(Streaming obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Track iceP_track;
            iceP_track = null;
            iceP_track = Track.ice_read(istr);
            inS.endReadParams();
            obj.play(iceP_track, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_togglePause(Streaming obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.togglePause(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_skipTime(Streaming obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_delta;
            iceP_delta = istr.readInt();
            inS.endReadParams();
            obj.skipTime(iceP_delta, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_stop(Streaming obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.stop(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "play",
            "skipTime",
            "stop",
            "togglePause"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_play(this, inS, current);
                }
                case 5:
                {
                    return iceD_skipTime(this, inS, current);
                }
                case 6:
                {
                    return iceD_stop(this, inS, current);
                }
                case 7:
                {
                    return iceD_togglePause(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
